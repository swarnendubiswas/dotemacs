#+TITLE: Emacs Notes

#+AUTHOR: Swarnendu Biswas
#+DATE: <21-06-2021>
#+EMAIL: swarnendu@cse.iitk.ac.in
#+CREATOR: Emacs 28 (Org mode 9.4)
#+STARTUP: showall indent
#+OPTIONS: H:4 num:3 author:nil date:nil toc:nil tags:nil TeX:t LaTeX:t
#+LaTeX_CLASS_OPTIONS: [10pt]
#+LATEX_HEADER: \usepackage{palatino}
#+LATEX_HEADER: \usepackage[letterpaper]{geometry}

* Notes about Emacs

Emacs searches for the initiation files in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init][following order]]: ~~/.emacs.el > ~/.emacs > ~/.emacs.d/init.el~.

To evaluate an s-expression, use ~C-x C-e~. Use ~C-M-x~ to evaluate the current top-level s-expression. Use
~M-:~ to evaluate an Emacs Lisp expression and print the result. Only an interactive function can be
invoked with ~M-x~ or a key binding.

The ~user-init-file~ should not ideally contain calls to ~load~ or ~require~ since they cause eager loading and
are expensive. A cheaper alternative is to use ~autoload~.

* Notes about Elisp

Quoting a lambda form means the anonymous function is not byte-compiled. The following forms are
all equivalent.
- ~(lambda (x) (* x x))~
- ~(function (lambda (x) (* x x)))~
- ~#'(lambda (x) (* x x))~

- https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
- https://emacs.stackexchange.com/questions/27007/backward-quote-what-does-it-mean-in-elisp

Backquote constructs allow you to quote a list but selectively evaluate elements of that list.

~(1 2 (3 ,(+ 4 5))) => (1 2 (3 9))~

A local variable specification takes the following form:

~;; -*- mode: MODENAME; VAR: VALUE; ... -*-~


** Useful Information

*** Avoid activating certain packages with package initialize

Set ~(setq package-load-list '((org-journal nil) all))~ before invoking ~package-initialize~

https://stackoverflow.com/questions/24563540/any-way-to-prevent-emacs-package-manager-from-loading-a-single-package-on-startu

*** Check if a variable/function/feature is defined or loaded

http://ergoemacs.org/emacs/elisp_check_defined.html

*** Difference between ~eval-after-load~ and ~with-eval-after-load~

      ~eval-after-load~ is considered ill-behaved because it is a function, not a macro, and thus requires the code inside it to be quoted, which means that it cannot be byte-compiled. It also accepts only one form. If we have more than one, you need to use ~progn~. For example:

#+BEGIN_SRC emacs-lisp
(eval-after-load "foo"
  '(progn
     (setq foo 42)
     (setq bar 17)))
#+END_SRC

The equivalent version with ~with-eval-after-load~ would be:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "foo"
  (setq foo 42)
  (setq bar 17))
#+END_SRC

*** Enable major mode per project via directory-local variables

[[https://www.reddit.com/r/emacs/comments/o2zeek/how_do_you_enable_prettiermode_and_other/][Reddit post]]

#+BEGIN_SRC emacs-lisp
;; Per-project .dir-locals.el
((nil . ((sb/prettier-p . t))))

(use-package prettier
  :preface
  (defvar-local sb/prettier-p nil "Should prettier be enabled?")
  :hook
  (web-mode . me/prettier-mode-maybe)
  :config
  (put 'sb/prettier-p 'safe-local-variable #'booleanp))

(defun sb/prettier-mode-maybe ()
  "Enable `prettier-mode' according to the `sb/prettier-p' directory-local variable."
  (add-hook 'hack-local-variables-hook
            (lambda ()
              (when sb/prettier-p
                 (prettier-mode)))
            nil t))
#+END_SRC

*** [[https://occasionallycogent.com/emacs_advice/index.html][Using Emacs advice]]

*** Difference between ~~setq~ and ~custom~

https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/

* Reference Configurations

- https://protesilaos.com/dotemacs
- https://github.com/CSRaghunandan/.emacs.d
- https://github.com/purcell/emacs.d
- https://github.com/MatthewZMD/.emacs.d
- https://github.com/redguardtoo/emacs.d
- https://github.com/jwiegley/dot-emacs
- https://github.com/d12frosted/environment/tree/master/emacs
- https://github.com/raxod502/radian/tree/develop/emacs
- https://github.com/dholm/dotemacs
- https://tychoish.com/post/towards-faster-emacs-start-times/
- https://github.com/wandersoncferreira/dotfiles
- https://github.com/rememberYou/.emacs.d
- https://github.com/seagle0128/.emacs.d/
- https://github.com/Gleek/emacs.d/
- https://github.com/magnars/.emacs.d
- https://github.com/kaushalmodi/.emacs.d
- https://luca.cambiaghi.me/vanilla-emacs/readme.html
- https://sachachua.com/dotemacs/
- https://emacs.nasy.moe/
- https://github.com/milkypostman/dotemacs
- https://github.com/tecosaur/emacs-config
- https://github.com/wdenton/.emacs.d
- https://github.com/tshu-w/.emacs.d
- https://github.com/croqaz/dotfiles/blob/main/emacs/Emacs.org
- https://github.com/mattduck/dotfiles
- https://alhassy.github.io/emacs.d/index.html
