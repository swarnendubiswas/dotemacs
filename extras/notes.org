#+TITLE: Emacs Notes
#+AUTHOR: Swarnendu Biswas
#+EMAIL: swarnendu@cse.iitk.ac.in
#+STARTUP: showeverything noindent nonum align inlineimages showstars odd nohideblocks entitiespretty

* Emacs Notes

** GNU Emacs

Emacs searches for the initiation files in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init][following order]]: ~~/.emacs.el > ~/.emacs > ~/.emacs.d/init.el~.

To evaluate an s-expression, use ~C-x C-e~. Use ~C-M-x~ to evaluate the current
top-level s-expression. Use ~M-:~ to evaluate an Emacs Lisp expression and print
the result. Only interactive functions can be invoked with ~M-x~ or a key binding.

The ~user-init-file~ should not ideally contain calls to ~load~ or ~require~ since
they cause eager loading and are expensive. A cheaper alternative is to use
~autoload~.

** Elisp

*** Lambda functions

Quoting a lambda form means the anonymous function is not byte-compiled. The
following forms are all equivalent.

- ~(lambda (x) (* x x))~
- ~(function (lambda (x) (* x x)))~
- ~#'(lambda (x) (* x x))~

*** Backquotes

Backquote constructs allow you to quote a list but selectively evaluate elements of that list.

~(1 2 (3 ,(+ 4 5))) => (1 2 (3 9))~

- https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
- https://emacs.stackexchange.com/questions/27007/backward-quote-what-does-it-mean-in-elisp

*** Local variables

A local variable specification takes the following form: ~;; -*- mode: MODENAME; VAR: VALUE; ... -*-~

*** Appending to an alist

#+begin_src elisp
   (setq auto-mode-alist (append
                          '(("SCon\(struct\|script\)$" . python-mode)
                            ("SConscript\\'" . python-mode)
                            ("[./]flake8\\'" . conf-mode)
                            ("/Pipfile\\'" . conf-mode))
                          auto-mode-alist))
#+end_src

*** Check if a variable/function/feature is defined or loaded

http://ergoemacs.org/emacs/elisp_check_defined.html

*** Difference between ~eval-after-load~ and ~with-eval-after-load~

~eval-after-load~ is considered ill-behaved because it is a function, not a macro, and thus requires the code inside it to be quoted, which means that it cannot be byte-compiled. It also accepts only one form. If we have more than one, you need to use ~progn~. For example:

#+BEGIN_SRC emacs-lisp
(eval-after-load "foo"
  '(progn
     (setq foo 42)
     (setq bar 17)))
#+END_SRC

The equivalent version with ~with-eval-after-load~ would be:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "foo"
  (setq foo 42)
  (setq bar 17))
#+END_SRC

- [[https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf][Elisp Reference Sheet]]

*** ~eval-after-load~ versus mode hook

Code wrapped in eval-after-load will be executed only once, so it is typically used to perform one-time setup such as setting default global values and behaviour. An example might be setting up a default keymap for a particular mode. In eval-after-load code, there's no notion of the "current buffer".

Mode hooks execute once for every buffer in which the mode is enabled, so they're used for per-buffer configuration. Mode hooks are therefore run later than eval-after-load code; this lets them take actions based upon such information as whether other modes are enabled in the current buffer.

*** Difference between ~fboundp~ and ~functionp~

~functionp~ tells you if its argument is a function value; ~fboundp~ tells you if a symbol has a function value bound to it.

#+begin_src elisp
> (functionp 'car)
t
> (fboundp 'car)
t
> (functionp (lambda ()))
t
> (fboundp (lambda ()))
â€‹*** Eval error ***  Wrong type argument: symbolp, (closure (t) nil)
#+end_src

*** [[https://occasionallycogent.com/emacs_advice/index.html][Using Emacs advice]]

*** Difference between ~setq~ and ~custom~

https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/

*** Difference between ~push~ and ~add-to-list~

~add-to-list~ adds elements to the front of a list. ~add-to-list~ is almost always preferable to ~push~ because ~push~ adds an element to a list even if it is already in the list, whereas ~add-to-list~ will not.

** Using Hooks

~emacs-startup-hook~ runs later than the ~after-init-hook~, it is the last recommended hook to load customizations. ~window-setup-hook~ runs after loading init files and handling the command line similar to ~emacs-startup-hook~. The only difference is that ~window-setup-hook~ hook runs after frame parameters have been set up in response to any settings from the init file.

** Useful Information

*** Read environment variables

Use the following to get strings from environment variables: ~(concat `,(getenv "HOME") "/bitbucket")~.

*** Avoid activating certain packages with package initialize

Set ~(setq package-load-list '((org-journal nil) all))~ before invoking ~package-initialize~

https://stackoverflow.com/questions/24563540/any-way-to-prevent-emacs-package-manager-from-loading-a-single-package-on-startu

*** Enable major mode per project via directory-local variables

[[https://www.reddit.com/r/emacs/comments/o2zeek/how_do_you_enable_prettiermode_and_other/][Reddit post]]

#+BEGIN_SRC emacs-lisp
;; Per-project .dir-locals.el
((nil . ((sb/prettier-p . t))))

(use-package prettier
  :preface
  (defvar-local sb/prettier-p nil "Should prettier be enabled?")
  :hook
  (web-mode . me/prettier-mode-maybe)
  :config
  (put 'sb/prettier-p 'safe-local-variable #'booleanp))

(defun sb/prettier-mode-maybe ()
  "Enable `prettier-mode' according to the `sb/prettier-p' directory-local variable."
  (add-hook 'hack-local-variables-hook
            (lambda ()
              (when sb/prettier-p
                 (prettier-mode)))
            nil t))
#+END_SRC

** Reference Configurations

- https://github.com/caisah/emacs.dz
- https://protesilaos.com/dotemacs
- https://github.com/CSRaghunandan/.emacs.d
- https://github.com/purcell/emacs.d
- https://github.com/MatthewZMD/.emacs.d
- https://github.com/redguardtoo/emacs.d
- https://github.com/jwiegley/dot-emacs
- https://github.com/d12frosted/environment/tree/master/emacs
- https://github.com/raxod502/radian/tree/develop/emacs
- https://github.com/dholm/dotemacs
- https://tychoish.com/post/towards-faster-emacs-start-times
- https://github.com/wandersoncferreira/dotfiles
- https://github.com/rememberYou/.emacs.d
- https://github.com/seagle0128/.emacs.d
- https://github.com/Gleek/emacs.d
- https://github.com/magnars/.emacs.d
- https://github.com/kaushalmodi/.emacs.d
- https://luca.cambiaghi.me/vanilla-emacs/readme.html
- https://sachachua.com/dotemacs
- https://emacs.nasy.moe
- https://github.com/milkypostman/dotemacs
- https://github.com/tecosaur/emacs-config
- https://github.com/wdenton/.emacs.d
- https://github.com/tshu-w/.emacs.d
- https://github.com/croqaz/dotfiles/blob/main/emacs/Emacs.org
- https://github.com/mattduck/dotfiles
- https://alhassy.github.io/emacs.d/index.html
- https://github.com/Lambda-Emacs/lambda-emacs
- https://alhassy.github.io/emacs.d
- [[https://github.com/xenodium/dotsies]]
- [[https://github.com/skangas/dot-emacs]]
- [[https://github.com/jeremyf/dotemacs]]
- [[https://github.com/LionyxML/LEmacs]]
- [[https://github.com/jamescherti/minimal-emacs.d/blob/main/early-init.el]]
- [[https://github.com/LionyxML/emacs-solo]]
- [[https://github.com/flajann2/emacs-config]]
- [[https://github.com/LionyxML/emacs-kick]]
  
