#+OPTIONS: ':t ^:{}

* GNU Emacs

This repository lists my preferred setup for GNU Emacs, my primary editor. The customization and install instructions should work on a GNU/Linux platform and are not extensively tested on Windows. Most of the included customizations are from the internet. Suggestions and pull requests are welcome.

** Install GNU Emacs

*** Ubuntu PPA

The Emacs version on Ubuntu is usually outdated. There are a couple of PPAs [[[https://launchpad.net/~kelleyk/+archive/ubuntu/emacs][Emacs stable releases]], [[https://launchpad.net/~ubuntu-elisp/+archive/ubuntu/ppa][Ubuntu Emacs Lisp]]] that we can use, but I prefer to build from source [[[*Build GNU Emacs]]].

#+begin_src shell
sudo add-apt-repository -y ppa:kelleyk/emacs
sudo apt update
sudo apt install emacs28-nativecomp
#+end_src

*** Build GNU Emacs from the source

Add the following repository only if you are using Ubuntu 20.04.

#+begin_src shell
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
# Install gcc-10 packages with the required support for libgccjit
sudo apt install -y gcc-10 g++-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev
#+end_src

Use the following instructions to configure and build GNU Emacs from the source (Ubuntu 20.04 or 22.04).

#+begin_src shell
wget https://ftp.gnu.org/gnu/emacs/emacs-28.2.tar.xz
tar -xf emacs-28.2.tar.xz

# Use GCC 10 if you are on Ubuntu 20.04
export CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11

make distclean
./autogen.sh
./configure --with-cairo --with-modules --without-compress-install --with-x-toolkit=no --with-gnutls=ifavailable --without-gconf --without-xwidgets --without-toolkit-scroll-bars --without-xaw3d --without-gsettings --with-mailutils --with-native-compilation --with-json=ifavailable --with-harfbuzz --with-imagemagick --with-jpeg --with-png --with-rsvg --with-tiff --with-wide-int --with-xft --with-xml2 --with-xpm --with-gif --with-threads --with-included-regex --with-zlib --without-sound  --with-dbus --without-pop --with-dbus CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer" prefix=/usr/local

# Enable support for native compilation with NATIVE_FULL_AOT
make -j"$(nproc)" NATIVE_FULL_AOT=1
sudo make install
#+end_src

Try the [[https://lists.gnu.org/archive/html/emacs-devel/2021-04/msg01404.html][following]] if the build fails: ~make bootstrap~ or ~rm lisp/loaddefs.el; make;~.

Evaluate the following to test that both fast JSON (Emacs 27+) and native compilation (Emacs 28+) are working.

#+begin_src emacs-lisp
(if (and (fboundp 'native-comp-available-p)
       (native-comp-available-p))
  (message "Native compilation is available")
(message "Native compilation is *not* available"))

(if (functionp 'json-serialize)
  (message "Native JSON is available")
(message "Native JSON is *not* available"))
#+end_src

You can also check whether "NATIVE__COMP" is part of the ~system-configuration-features~ variable.

Run the following to native compile all Elisp files under a directory (e.g., =~/.emacs.d=):
~(native-compile-async "//home/swarnendu//.emacs.d/elpa" 'recursively)~

** Setup Emacs 

Back up the contents of your =.emacs.d= directory if it is not empty, and then check out the source.

#+begin_src shell
git clone https://github.com/swarnendubiswas/dotemacs.git .emacs.d
#+end_src

** Directory structure

- =modules= - Emacs modules divided across features
- =extras= - third-party packages (may not be available from the package archives)
- =snippets= - custom snippets
- =references= - documentation and help files
- =dir-locals-examples= - examples to show how to use directory-local variables
- =projectile-examples= - projectile configuration files

The following are examples of a few customization options defined in [[./modules/init-config.el][init-config.el]]. Please check the file for more customization options.

- =sb/theme= -- Set the desired theme from a bunch of themes (default is =modus-vivendi=)
- =sb/modeline-theme= -- Set the desired modeline theme (default is =powerline-nano=)
- =sb/fill-column= -- Column beyond which lines should not extend (default is 100)
- =sb/minibuffer-completion= - Choose either =ivy= or =vertico= for narrowing and selection (default is =vertico=)
- =sb/capf= - Choose either =company= or =corfu= for in-buffer completion at point (default is =company=)
- =sb/tab-bar-handler= - Choose either =awesome-tab= or =centaur-tabs= for tabbed display (default is =centaur-tabs=)
- =sb/project-handler= - Choose either =project.el= or =projectile= for handling projects (default is =projectile=)
- =sb/lsp-provider= - Choose between =lsp-mode= and =eglot= (default is =lsp-mode=) 
- =sb/disable-package.el= - Disable =package.el= and prefer the =straight.el= package manager.
- =sb/python-langserver= - Choose between =pylsp= and =pyright= as the Python language server (default is =pylsp=).
- =sb/delete-trailing-whitespace-p= - Control whether trailing whitespace should be deleted or not
  
** LSP

We enable LSP support for the more popular languages supported with either =lsp-mode= or =eglot=. You may need to install the necessary language servers separately to complement the packages. Use =M-x lsp-install-server= or check =setup-emacs.sh=.

**** Installing servers for Eglot

#+begin_src shell
npm install -save-dev @emacs-grammarly/grammarly-languageserver

sudo apt-get install -y libslf4j-java liblog4j1.2-java
wget https://github.com/valentjn/ltex-ls/releases/download/16.0.0/ltex-ls-16.0.0-linux-x64.tar.gz
tar xf ltex-ls-16.0.0-linux-x64.tar.gz
cp ltex-ls-16.0.0/bin/* $HOME/.local/bin/.
# Add "ltex-ls-16.0.0" to $PATH

wget https://github.com/eclipse/eclipse.jdt.ls/archive/refs/tags/v1.23.0.tar.gz
tar xf v1.23.0.tar.gz
cd eclipse.jdt.ls-1.23.0
./mvnw clean verify -DskipTests=true
# Add "eclipse.jdt.ls-1.23.0/org.eclipse.jdt.ls.product/target/repository/bin" to $PATH
rm -rf eclipse.jdt.ls-1.23.0 
#+end_src

** Support for Tags

Support for LSP in GNU Emacs means you will usually not need to create tags separately. However, tags are still useful for languages that are not yet supported by =lsp-mode= and to understand complicated project structures which a language server may not understand. I prefer [[https://github.com/universal-ctags/ctags][Universal Ctags]] over [[https://www.gnu.org/software/global/][GNU Global]].

*** Universal Ctags

Use Universal Ctags (=u-ctags=) with =Citre=.

- =-R= -- recursively scan for files
- =-e= -- use Emacs-compatible syntax
- =--list-excludes= -- check which patterns are excluded from processing
- =--list-languages= -- list supported languages
- =--languages=Python= -- include Python files

By default, Emacs expects a tag file by the name =TAGS= in the current directory. Once the tag file is built, the following commands exercise the tag indexing feature.

- ~M-x visit-tags-table <RET> FILE <RET>~ -- Select the tag file =FILE= to use
- ~M-. [TAG] <RET>~ -- Find the first definition of ~TAG~. The default tag is the identifier under the cursor.
- ~M-*~ -- Pop back to where you invoked ~M-.~
- ~C-u M-.~ -- Find the next definition for the last tag

For more commands, see the Tags topic in the Emacs info document.

**** TensorFlow

#+begin_src shell
ctags -eR --exclude=*.py --exclude=*.json --exclude=*.js --exclude=bazel-* --exclude=*.sh --exclude=*.xml --exclude=*.java --exclude=*.html --exclude=*.md --exclude=*.pbtxt
#+end_src

**** C/C++ projects

#+begin_src shell
ctags -eR --exclude=*.py --exclude=*.json --exclude=*.js --exclude=build* --exclude=*.sh --exclude=*.xml --exclude=*.java --exclude=*.html --exclude=*.md --exclude=*.pbtxt --exclude=*.png --exclude=*.css --exclude=*.rst --exclude=doc --exclude=PTRacer-solver
#+end_src

**** LaTeX projects

#+begin_src shell
find . -name "*.tex" | ctags -e -quiet -L -
#+end_src

**** Python files

#+begin_src shell
find src -name "*.py" | ctags -e -L -
#+end_src

**** Elisp files

#+begin_src shell
ctags -e -R --exclude=@.ctagsignore --languages=EmacsLisp .
#+end_src

**** Ignore directories and files

#+begin_src shell
ctags -eR --exclude=node_modules --exclude=.meteor --exclude='packages/*/.build/'
#+end_src

**** Use an ignore file

#+begin_src shell
ctags -eR -quiet=yes --exclude=@.ctagsignore .
#+end_src

#+begin_src shell
$ cat .ctagsignore
dir1
dir2
dir3
#+end_src

~find -L . -type f -iname "*.cpp" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.h" -o -iname "*.hpp" -o -iname "*.cu" | ctags -e -L -~

**** Parse only Python files

#+begin_src shell
ctags -eR --languages=Python
#+end_src

*** GNU Global

Use GNU Global with =counsel-gtags=: ~gtags -cv --gtagslabel=new-ctags~

**** C/C++

#+begin_src shell
find -L . -type f -iname "*.cpp" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.h" -o -iname "*.hpp" -o -iname "*.py" ! -iname "*.cu" | gtags -cv --gtagslabel=new-ctags -f -
#+end_src

**** Python

#+begin_src shell
find ./src -type f -iname "*.py" ! -iname "__init__.py" | gtags -cv --gtagslabel=new-ctags -f -
#+end_src

**** LaTeX

#+begin_src shell
find . -type f -iname "*.tex" | gtags -vc --gtagslabel=new-ctags -f -
#+end_src

**** TensorFlow

#+begin_src shell
find -L . -type f -iname "*.cpp" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.h" -o -iname "*.hpp" -o -iname "*.proto" | gtags -cv --gtagslabel=new-ctags -f -
#+end_src

*** Use GNU Global with Universal Ctags support

GNU Global has better database search support while Universal Ctags supports more languages. GNU Global can be built with support for Universal Ctags.

- [[https://github.com/rdbeni0/emacs.d/tree/main/ggtags]]
- [[https://stackoverflow.com/questions/55073452/compiling-gnu-global-with-universal-ctags-support][Compiling GNU Global with universal-ctags support]]
- [[https://stackoverflow.com/questions/12922526/tags-for-emacs-relationship-between-etags-ebrowse-cscope-gnu-global-and-exub][Tags for Emacs: Relationship between etags, ebrowse, cscope, GNU Global and exuberant ctags]]
- [[https://blade6570.github.io/soumyatripathy/blog_gnuglobal/gnu_global.html][GTags for Python in Emacs]]

** Configuring Emacs Daemon

Enable server support either through =init.el= or as a =systemd= service. I prefer the ~systemd~ approach. Create a file ~$HOME/.config/systemd/user/emacs.service~ with the following content.

#+begin_src config
[Unit]
Description=GNU Emacs Daemon

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(progn (setq kill-emacs-hook 'nil) (kill-emacs))"
Restart=always

[Install]
WantedBy=default.target
#+end_src

- Enable the unit to start at login: ~systemctl --user enable emacs.service~
- Disable the unit to start at login: ~systemctl --user disable emacs.service~
- Start the service for the current session: ~systemctl --user start emacs.service~
- Stop the service for the current session: ~systemctl --user stop emacs.service~
- Restart the service for the current session: ~systemctl --user restart emacs.service~

** Desktop Entry

Create =emacs.desktop= and =emacsclient.desktop= files in =$HOME/.local/share/applications= with the following content.

#+begin_src config
[Desktop Entry]
Name=GNU Emacs
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=/usr/local/bin/emacs
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src

#+begin_src config
[Desktop Entry]
Name=GNU Emacsclient
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -c -a "" -n -F "'(fullscreen . maximized)" %f
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupWMClass=Emacs
Keywords=Text;Editor;
#+end_src

- [[https://tychoish.com/post/running-emacs/][Running Emacs]]

** Emacs in a Terminal

I use LSP over Tramp intensively, and LSP+Tramp is sluggish and fails often. It seems difficult to properly set up language servers with Tramp support. Therefore, I prefer to use Emacs in a terminal that has a much better performance. It is important to set up support for 24-bit colors and proper keybindings in the terminal for a good experience. I use [[https://github.com/alacritty/alacritty][Alacritty]] which is easy to customize.

Using Terminal Emacs over Tramp for editing remote files obviates the need for a remote langsever.

Use the steps mentioned in the link [[https://github.com/syl20bnr/spacemacs/wiki/Terminal][Spacemacs Terminal]] to enable support for 24bit colors in the terminal.

#+begin_src bash
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export TERM=xterm-24bit
#+end_src

Using ~export TERM=xterm-24bit~ may lead to failures when accessing remote systems. In such cases, we can fall back to ~TERM=xterm-256color ssh -X <remote-path>~.

** Emacsclient

Start the Emacs daemon with ~emacs --daemon~. To run Emacsclient with a GUI, use =emacsclient -c -a ""=, where =-a ""= starts Emacs daemon and reattaches. To run Emacsclient in a terminal, use ~emacsclient -nw -q~ or =emacsclient -t -q -a ""=, where =-t= starts the client in the terminal.

Add the following to your ~.bashrc~ to use Emacsclient as your editor.

#+begin_src bash
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR opens in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI mode
#+end_src

- [[https://www.emacswiki.org/emacs/EmacsClient][Emacs Client]]

** Debugging Emacs

- ~kill -s USR2 [pid]~
- ~killall -s USR2 emacs~
- ~pkill -USR2 emacs~

** Profile startup time

~emacs -Q -l /home/swarnendu/github/dotemacs/extras/profile-dotemacs.el -f profile-dotemacs~

Estimate the best possible startup time: =emacs -q --eval​='(message "%s" (emacs-init-time))'=

- [[https://blog.d46.us/advanced-emacs-startup][Advanced Techniques for Reducing Emacs Startup Time]]

** Known Bugs

- Flickering with =corfu-terminal-mode=
- Disable pairing = before at the beginning of a word in =smartparens=
- =flycheck-mode= is disabled for Elisp configuration files
